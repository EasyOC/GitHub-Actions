name: .NET Build with Static Code Analysis
description: Builds all .NET solutions in the given directory with static code analysis.

inputs:
  directory:
    required: false
    default: .
    description: Path to the directory where a solution file can be found.
  verbosity:
    required: false
    default: quiet
    description: Verbosity parameter for dotnet build.
  enable-code-analysis:
    required: false
    default: "true"
    description: If set to "true", static code analysis is enabled during the build.
  enable-nuget-caching:
    required: false
    default: "false"
    description: >
      If set to "true", the NuGet packages will be cached by GitHub. This is faster if you have a lot of NuGet packages,
      but negligible or even slower if you only have a handful.
  enable-npm-caching:
    required: false
    default: "false"
    description: >
      If set to "true", the NPM packages will be cached by GitHub. This is faster if you have a lot of NPM packages, but 
      negligible or even slower if you only have a handful.
  cache-version:
    required: false
    default: "0"
    description: >
      Change this to any other value to alter the cache key, effectively invalidating the latest cache. This is the only
      current way to force "clear" the cache (https://github.community/t/how-to-clear-cache-in-github-actions/129038/5)
      until the associated issue (https://github.com/actions/cache/issues/2) is resolved.

runs:
  using: "composite"
  steps:
    - name: Detect Cache Configuration
      id: detect-cache-configuration
      shell: pwsh
      run: |
        function Set-Output($Key, $Value) { Write-Output "::set-output name=$Key::$Value" }

        $isNuget = $${{ inputs.enable-nuget-caching == 'true' }}
        $isNpm = $${{ inputs.enable-npm-caching == 'true' }}
        $npmPath = if ($isNpm) { npm config get cache }
        $key = @'
        ${{ github.repository }}-${{ runner.os }}-${{ inputs.cache-version }}-${{ inputs.directory }}
        '@.Trim()

        if ($isNuget -and $isNpm) 
        {
            $restoreKeys = "${key}-nuget+npm"
            $hash = '${{ hashFiles('**/*.csproj', '**/package-lock.json', '**/pnpm-lock.yaml') }}'

            # Multiple paths must be separaters by "\n", but we can't include newline in the 
            # workflow command so we have to mususe the format function like this.
            Set-Output 'paths' ('~/.nuget/packages', $npmPath -join '{0}')
        }
        elseif ($isNuget)
        {
            $restoreKeys = "${key}-nuget"
            $hash = '${{ hashFiles('**/*.csproj') }}'
            Set-Output 'paths' '~/.nuget/packages'
        }
        elseif ($isNpm)
        {
            $restoreKeys = "${key}-npm"
            $hash = '${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml') }}'
            Set-Output 'paths' $npmPath
        }
        else
        {
            Set-Output 'cache-enabled' 'false'
            exit 0
        }
        
        Set-Output 'cache-enabled' 'true'
        Set-Output 'key' "${restoreKeys}-$hash"
        Set-Output 'restore-keys' $restoreKeys

    - name: Cache NuGet
      uses: actions/cache@v3
      if: ${{ outputs.detect-cache-configuration.cache-enabled != 'false' }}
      with:
        path: ${{ format(outputs.detect-cache-configuration.paths, '\n') }}
        key: ${{ outputs.detect-cache-configuration.key }}
        restore-keys: ${{ outputs.detect-cache-configuration.restore-keys }}

    - name: Build and Static Code Analysis
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      run: |
        $switches = @{
            Verbosity = "${{ inputs.verbosity }}"
            EnableCodeAnalysis = "${{ inputs.enable-code-analysis }}"
            Version = "1.$Env:GITHUB_RUN_NUMBER.$Env:GITHUB_RUN_ATTEMPT-$Env:GITHUB_RUN_ID"
        }

        $startTime = [DateTime]::Now
        ${{ github.action_path }}/build.ps1 @switches
        $endTime = [DateTime]::Now

        Write-Output ("Solution build took {0:0.###} seconds." -f ($endTime - $startTime).TotalSeconds)
