name: Publish to NuGet
description: Builds all .NET solutions in the given directory with static code analysis.

inputs:
  source:
    required: false
    default: https://api.nuget.org/v3/index.json
    description: The NuGet server URL used by the `dotnet nuget push` command's `--source` argument. 
  verbosity:
    required: false
    default: minimal
    description: The logging verbosity type used by the `dotnet` command.
secrets:
  API_KEY:
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup
      id: setup
      shell: pwsh
      run: |
        $source = @'
        ${{ inputs.source }}
        '@.Trim()

        Write-Output "NuGet Source: $source"
        "SOURCE_URL=$source" >> $Env:GITHUB_ENV
        
        $version = $Env:GITHUB_REF_NAME.Trim().TrimStart("v")
        Write-Output "Target Version: $version"
        "PUBLISH_VERSION=$version" >> $Env:GITHUB_ENV
        Write-Output "::set-output name=publish-version::$version"
        
        "${{ github.action_path }}" >> $Env:GITHUB_PATH

    - name: Add Source Link package
      shell: bash
      run: bash add-package.sh Microsoft.SourceLink.GitHub

    - name: Update package manifest version
      shell: pwsh
      run: Update-ManifestVersion './' $Env:PUBLISH_VERSION

    - name: Install dependencies
      shell: pwsh
      run: dotnet restore -p:NuGetBuild=true --verbosity ${{ inputs.verbosity }}

    - name: Build
      uses: Lombiq/GitHub-Actions/.github/actions/build-dotnet@issue/OSOE-139
      # Notes on the configuration:
      # * -p:NuGetBuild=true is our property to load Lombiq dependencies from NuGet by switching project references
      #   to package references.
      # * -p:GenerateDocumentationFile=True is for generating XML doc files. Needed both for build and pack. It'd
      #   cause CS* warnings but we handle that centrally from .NET Analyzers so disabling them here.
      # * VSTHRD* rules come from somewhere unknown, disabling them.
      # * -p:EnableNETAnalyzers=false is to disable further .NET analyzer we don't need here.
      # * -p:ContinuousIntegrationBuild=true is needed for Deterministic Builds:
      #   https://github.com/clairernovotny/DeterministicBuilds.
      # * -p:DebugSymbols=true and -p:DebugType=portable are needed to generate PDB files.
      with:
        verbosity: ${{ inputs.verbosity }}
        enable-code-analysis: false
        publish-version: ${{ steps.setup.outputs.publish-version }}
        dotnet-build-switches: |
            --no-restore
            --configuration:Release
            --verbosity:${{ inputs.verbosity }}
            -p:NuGetBuild=true
            -p:LangVersion=Latest
            -p:GenerateDocumentationFile=True
            -p:NoWarn=CS1573%3BCS1591%3BVSTHRD002%3BVSTHRD200
            -p:EnableNETAnalyzers=false
            -p:ContinuousIntegrationBuild=true
            -p:DebugSymbols=true
            -p:DebugType=portable

    - name: Pack
      uses: Lombiq/GitHub-Actions/.github/actions/build-dotnet@issue/OSOE-139
      # Notes on the configuration apart from what's also for dotnet build:
      # * NoWarn on NU5104 to not have warnings for prerelease dependencies, see:
      #   https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5104.
      # * -p:WarnOnPackingNonPackableProject=True will cause a build warning (converted to error) if we try to pack
      #   a non-packagable project.
      # * -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg are needed to generate symbol packages:
      #   https://docs.microsoft.com/en-us/nuget/create-packages/symbol-packages-snupkg.
      with:
        verbosity: ${{ inputs.verbosity }}
        enable-code-analysis: false
        publish-version: ${{ steps.setup.outputs.publish-version }}
        dotnet-build-switches: |
          --no-restore
          --no-build
          --output:artifacts
          -p:NuGetBuild=true
          -p:GenerateDocumentationFile=True
          -p:NoWarn=NU5104
          -p:WarnOnPackingNonPackableProject=True
          -p:IncludeSymbols=true
          -p:SymbolPackageFormat=snupkg
          -p:NoDefaultExcludes=true 

    - name: Push with dotnet
      shell: pwsh
      run: dotnet nuget push artifacts/*.nupkg --api-key $Env:API_KEY --source $Env:SOURCE_URL --skip-duplicate

    - name: Publish Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: NuGet-Package
        path: artifacts

    # This is not in its own action becasuse it's all very specific to this NuGet publishing.
    - name: Create Release
      # v1.10.0
      uses: ncipollo/release-action@58ae73b360456532aafd58ee170c045abbeaee37
      # This is to prevent creating releases when pushing tags for issue-specific pre-releases like
      # v4.3.1-alpha.osoe-86.
      if: "!contains(github.ref, '-')"
      with:
        allowUpdates: true
        generateReleaseNotes: true
        artifacts: artifacts/*.nupkg, artifacts/*.snupkg
