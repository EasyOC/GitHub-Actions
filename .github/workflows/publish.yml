name: publish

on:
  workflow_call:
    inputs: 
      source:
        required: false
        type: string
    secrets:
      # We can't access org secrets here so they need to be passed in, see:
      # https://github.community/t/resuable-called-workflow-environment-variables-secrets-and-trigger-event-access/207723/2
      API_KEY:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: haya14busa/action-cond@v1
        id: sourceeval
        with:
          cond: ${{ inputs.source == '' }}
          if_true: "https://api.nuget.org/v3/index.json"
          if_false: "${{ inputs.source }}"
      - name: Print source
        run: echo Nuget Source:${{ steps.sourceeval.outputs.value }}
      - name: Get the version
        id: get_version
        run: |
          VERSION="${GITHUB_REF_NAME//v}"
          echo VERSION:${VERSION}
          echo ::set-output name=VERSION::${VERSION}         
      - uses: actions/checkout@v2    
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.*
      - name: Install dependencies
        run: dotnet restore -p:NuGetBuild=True
      - name: Build
        # Notes on the configuration:
        # * -p:NuGetBuild=True is our property to load Lombiq dependencies from NuGet by switching project references
        #   to package references.
        # * -p:GenerateDocumentationFile=True is for generating XML doc files. Needed both for build and pack. It'd 
        #   cause CS* warnings but we hande that centrally from .NET Analyzers so disabling them here.
        # * VSTHRD* rules come from somewhere unknown, disabling them.
        # * -p:EnableNETAnalyzers=false is to disable further .NET analyzer we don't need here.
        # * -p:ContinuousIntegrationBuild=true is needed for Deterministic Builds:
        #   https://github.com/clairernovotny/DeterministicBuilds.
        # * -p:DebugSymbols=true and -p:DebugType=portable are needed to generate PDB files.
        run: dotnet build --configuration Release --no-restore -p:NuGetBuild=True -p:LangVersion=Latest -p:GenerateDocumentationFile=True -p:NoWarn=CS1573%3BCS1591%3BVSTHRD002%3BVSTHRD200 -p:EnableNETAnalyzers=false -p:ContinuousIntegrationBuild=true -p:DebugSymbols=true -p:DebugType=portable
      - name: Pack
        # Notes on the configuration apart from what's also for dotnet build:
        # * NoWarn on NU5104 to not have warnings for prerelease dependencies, see: 
        #   https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5104.
        # * -p:WarnOnPackingNonPackableProject=True will cause a build warning (converted to error) if we try to pack
        #   a non-packagable project.
        # * -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg are needed to generate symbol packages:
        #   https://docs.microsoft.com/en-us/nuget/create-packages/symbol-packages-snupkg.
        run: dotnet pack --output artifacts --configuration Release --no-restore --no-build  -p:NuGetBuild=True -p:Version=${{ steps.get_version.outputs.VERSION }} -p:GenerateDocumentationFile=True -p:NoWarn=NU5104 -p:TreatWarningsAsErrors=true -warnaserror -p:WarnOnPackingNonPackableProject=True -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
      - name: Push with dotnet
        run: dotnet nuget push artifacts/*.nupkg --api-key ${{ secrets.API_KEY }} --source ${{ steps.sourceeval.outputs.value }} --skip-duplicate
      - name: Archive artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts          
